"DSMC WWW Site"_dws - "DSMC Documentation"_dd - "DSMC Commands"_dc :c

:link(dws,http://dsmc.sandia.gov)
:link(dd,Manual.html)
:link(dc,Section_commands.html#comm)

:line

read_surf command :h3

[Syntax:]

read_surf surf-ID filename keyword args ... :pre

surf-ID = ID to assign to this surface :ulb,l
filename = name of surface file :l
zero or more keyword/args pairs may be appended :l
keyword = {origin} or {trans} or {atrans} or {ftrans} or {scale} or {rotate} or {invert} :l
  origin args = Ox Oy Oz
    Ox,Oy,Oz = set origin of surface to this point (distance units)
  trans args = Dx Dy Dz
    Dx,Dy,Dz = translate origin by this displacement (distance units)
  atrans args = Ax Ay Az
    Ax,Ax,Az = translate origin to this absolute point (distance units)
  ftrans args = Fx Fy Fz
    Fx,Fy,Fz = translate origin to this fractional point in simulation box
  scale args = Sx Sy Sz
    Sx,Sy,Sz = scale surface by these factors around origin
  rotate args = theta Rx Ry Rz
    theta = rotate surface by this angle in counter-clockwise direction (degrees)
    Rx,Ry,Rz = rotate around vector starting at origin pointing in this direction
  invert args = none :pre
:ule

[Examples:]

read_surf sphere surf.file
read_surf sphere surf.file origin 

[Description:]

Read the geometry of one or more surfaces from a file.  In DSMC, a
"surface" is a grid of surface elements on the surface of a physical
object embedded in the global simulation box.  The surface elements
are triangles in 3d or line segments in 2d.  Particles collide with
surface elements as they advect, and optionally perform surface
chemistry during the collision.  Collision statistics for each surface
element are tallied, which can be ouput via the dump surface command.

The input file contains a list of triangles or line segments; DSMC
does not know or care whether they represent one or more objects.

All of the surface elements in the file are assigned a surf-ID, which
can be used in other commands.  If the read_surf command is used
multiple times, to read multiple files, the same surf-ID can be
re-used if desired.

The format of the surface file is discussed below.  The optional
keywords allow the vertices in the file to be translated, scaled, and
rotated in various ways.  These allow a single input file, e.g. for a
gridded unit sphere, to be used in a variety of simulations.

NOTE: should we add a "refine" keyword

:line

The format of a surface file is as follows.  Same as LAMMPS
data file, comments, blank lines, header body, or more fixed?

same as data file in LAMMPS, comment and blank lines

N points (required)
N lines (2d only)
N tris (3d only)

Points

id x y z (what about z)

Lines

p1 p2

Triangles

p1 p2 p3


discuss handedness

:line

The following optional keywords can be specified.  Their geometric
transformations are performed in the order they are listed, which
gives flexibility in how surfaces can be manipulated.  Note that the
order may be important; e.g. performing a {scale} followed by a
{rotate} may not be the same as a {rotate} followed by a {scale}.

Most of the keywords perform a geometric transformation on all the
vertices in the surface file with respect to an origin point.  By
default the origin is (0.0,0.0,0.0), regardless of the position of
individual vertices in the file.

The {origin} keyword resets the origin to the specified {Ox,Oy,Oz}.
This operation has no effect on the vertices.

The {trans} keyword shifts or displaces the origin by the vector
(Dx,Dy,Dz).  It also displaces each vertex by (Dx,Dy,Dz).

The {atrans} keyword resets the origin to an absolute point (Ax,Ay,Az)
which implies a displacement (Dx,Dy,Dz) from the current origin.  It
also displaces each vertex by (Dx,Dy,Dz).

The {ftrans} keyword resets the origin to a fractional point
(Fx,Fy,Fz).  Fractional means that Fx = 0.0 is the lower edge/face in
the x-dimension and Fx = 1.0 is the upper edge/face in the
x-dimension, and similarly for Fy and Fz.  This change of origin
implies a displacement (Dx,Dy,Dz) from the current origin.  This
operation also displaces each vertex by (Dx,Dy,Dz).

The {scale} keyword does not change the origin.  It computes the
displacement vector of each vertex from the origin (delx,dely,delz)
and scales that vector by (Sx,Sy,Sz), so that the new vertex
coordinate is (Ox + Sx*delx,Oy + Sy*dely,Oz + Sz*delz).

The {rotate} keyword does not change the origin.  It rotates the
coordinates of all vertices by an angle {theta} in a counter-clockwise
direction, around the vector starting at the origin and pointing in
the direction {Rx,Ry,Rz}.  Any rotation can be represented by an
appropriate choice of origin, {theta} and (Rx,Ry,Rz).

The {invert} keyword does not change the origin or any vertex
coordinates.  It flips the direction of the outward surface normal of
each surface element by changing the ordering of its vertices.  Since
particles only collide with the outer surface of a surface element,
this is a mechanism for using a surface files containing a single
sphere (for example) as either a sphere to embed in a flow field, or a
spherical outer boundary containing the flow.

[Restrictions:]

This command can only be used after the simulation box is defined by
the "create_box"_create_box.html command, and after a grid has been
created by the "create_grid"_create_grid.html command.

Every vertex in the final surface (after translation, rotation,
scaling, etc) must be inside the global simulation box.  Inside means
the vertex cannot be on the face of the simulation box, but must be
interior to the box.  This restriction will be relaxed at some point.

The surface elements in a single surface file must represent a
"watertight" surface.  This means that no pair of vertices is within
an epsilon distance of each other.  (HOW IS EPSILON DEFINED, should it
be user-settable).  For a 3d simulation it additionally requires that
every triangle edge is part of exactly 2 triangles.  For a 2d
simulation it additionally requires that every vertex is part of
exactly 2 line segments.  Thus if you want to model an infinitely thin
flat plate, you should grid it on both sides.  Note that this
definition of watertight does not require that the surface elements in
a file represent a single physical object; multiple objects can be
represented, provided each is watertight.

When running a simulation with multiple surfaces, read from one or
more surface files, you should insure they do not overlap/intersect
each other.  DSMC does not check for this, but it will typically lead
to unphysical particle dynamics.

[Related commands:] none

[Default:]

The default origin for the vertices in the surface file is (0,0,0).
