"SPARTA WWW Site"_sws - "SPARTA Documentation"_sd - "SPARTA Commands"_sc :c

:link(sws,http://dsmc.sandia.gov)
:link(sd,Manual.html)
:link(sc,Section_commands.html#comm)

:line

global command :h3

[Syntax:]

global keyword values ... :pre

one or more keyword/value pairs :ulb,l
keyword = {fnum} or {nrho} or {vstream} or {temp} or {gravity} or {surfmax} or {gridcut} or {comm/sort} or {comm/style} :l
  {fnum} value = ratio
    ratio = Fnum ratio of physical particles to simulation particles
  {nrho} value = density
    density = number density of background gas (# per length^3 units)
  {vstream} values = Vx Vy Vz
    Vx,Vy,Vz = streaming velocity of background gas (velocity units)
  {temp} values = thermal
    thermal = temperature of background gas (temperature units)
  {gravity} values = mag ex ey ez
    mag = magnitude of acceleration due to gravity (acceleration units)
    ex,ey,ez = direction vector that gravity acts in
  {surfmax} value = Nsurf
    Nsurf = max # of surface elements allowed in single grid cell
  {gridcut} value = cutoff
    cutoff = acquire ghost cells up to this far away (distance units)
  {comm/sort} value = yes or no
    yes/no = sort incoming messages by proc ID if yes, else no sort
  {comm/style} value = neigh or all
    neigh = setup particle comm with subset of near-neighbor processor
    all = allow particle comm with potentially any processor :pre
:ule

[Examples:]

background fnum 1.0e20
background vstream 100.0 0 0
background temp 1000 :pre

[Description:]

Define global properties of the system.

The {fnum} keyword sets the ratio of real, physical particles
(i.e. molecules) to simulation particles.

The {nrho} keyword sets the number density of the background gas.
For 3d simulations the units are #/volume.  For 2d, the units are
effectively #/area.

Assuming your simulation is populated by particles from the
background gas, the {fnum} and {nrho} settings determine
how many particles will be present in your simulation.

The {vstream} keyword sets the streaming velocity of the background
gas.

The {temp} keyword sets the thermal temperature of the background gas.
This is a Gaussian velocity distribution superposed
on top of the streaming velocity.

The {gravity} keyword sets an acceleration term which is included in
the motion of particles.  The magnitude of gravity is set by the {mag}
keyword.  Its direction of action is set as (ex,ex,ez).  The direction
does not have to be a unit vector, since the code renormlizes the
direction vector by the magnitude.  If the magnitude is set to 0.0, no
acceleration term is included, which is the default.

The {surfmax} keyword determines the maximum number of surface
elements (lines in 2d, triangles in 3d) can overlap a single grid
cell.  The default is 100, which should be large enough for most
simulations, unless you define very coarse grid cells (relative to the
size of surface elements).  

The {gridcut} keyword determines the distance at which ghost grid
cells will be stored by each processor.  Assuming the processor owns a
compact clump of grid cells, it will also store ghost cell information
from nearby grid cells, up to this distance away.  If the setting is <
0.0 (the default) then each processor owns a copy of ghost cells for
all grid cells in the simulation.  This can require too much memory
for large models.  If the cutoff is too short, more communication of
particles may be needed to complete particle moves each timestep.

NOTE: doc more about trade-off in comm/comp for this gridcut setting.

The {comm/sort} keyword determines whether the messages a proc
receives for migrating particles (every step) and ghost grid cells (at
setup and after re-balance) are sorted by processor ID.  Doing this
requires a bit of overhead, but can make it easier to debug in
parallel, because simulations should be reproducible when run on the
same number of processors.  Without sorting, messages can arrive in a
randomized order, which means lists of particles and grid cells can be
in a different order and lead to statistical differences between runs.

The {comm/style} keyword determines the style of particle
communication that is performed to migrate particles every step.  The
most efficient method for this is typically for each processor to
exchange messages with only the processors it has ghost cells for,
which is the method used by the {neigh} setting.  The {all} setting
performs a relatively cheap, but global communication operation to
determine the exact set of neighbors that need to be communicated with
at each step.  For small processor counts there is typically little
difference.  On large processor counts the {neigh} setting can be
significantly faster.  However, if the flow is streaming in one
dominant direction, there may be no particle migration needed to
upwind processors, so the {all} method could generate smaller counts
of neighboring processors.

Note that the {neigh} style will only have an effect (at run time)
when the grid is decomposed by the {rcb} (recursive coordinate
bisectioning) option of the "balance"_balance.html or "fix
balance"_fix_balance.html commands.  If that is not the case, it is
as-if the {all} setting were being used.

[Restrictions:]

The global surfmax command must be used before surface elements are
defined, e.g. via the "read_surf"_read_surf.html command.

The global gridcut command with a cutoff >= 0.0 will only be active if
the grid cells owned by each processor are "clumped" by the time a
simulation is performed.  This will be the case if the RCB option of
the "balance_grid"_balance_grid.html or "fix balance"_fix_balance.html
command is used.  If they are not clumped, a cutoff setting >= 0.0
will generate an error.

[Related commands:]

"mixture"_mixture.html

[Default:]

The keyword defaults are fnum = 1.0, nrho = 1.0, vstream = 0.0 0.0
0.0, temp = 273.15, gravity = 0.0 0.0 0.0 0.0, surfmax = 100, gridcut
= -1.0, comm/sort = no, comm/style = neigh.
