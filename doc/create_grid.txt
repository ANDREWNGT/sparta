"SPARTA WWW Site"_sws - "SPARTA Documentation"_sd - "SPARTA Commands"_sc :c

:link(sws,http://dsmc.sandia.gov)
:link(sd,Manual.html)
:link(sc,Section_commands.html#comm)

:line

create_grid command :h3

[Syntax:]

create_grid Nx Ny Nz keyword args ... :pre

Nx,Ny,Nz = size of 1st-level grid in each dimension :ulb,l
zero or more keywords/args pairs may be appended :l
keyword = {level} or {stride} or {clump} or {block} or {random} :l
  {level} args = Nlevel Px Py Pz Cx Cy Cz 
    Nlevel = level from 2 to M, must be in ascending order
    Px Py Pz = range of parent cells in each dimension in which to create child cells
    Cx Cy Cz = size of child grid in each dimension within parent cells
  {stride} arg = {xyz} or {xzy} or {yxz} or {yzx} or {zxy} or {zyx}
  {clump} arg = {xyz} or {xzy} or {yxz} or {yzx} or {zxy} or {zyx}
  {block} args = Px Py Pz
    Px,Py,Pz = # of processors in each dimension
  {random} args = none :pre
:ule

[Examples:]

create_grid 10 10 10
create_grid 10 10 10 block * * *
create_grid 10 10 10 block 4 2 5
create_grid 10 10 10 level 2 * * * 2 2 3
create_grid 8 8 10 level 2 5* * * 4 4 4 level 3 1 2*3 3* 2 2 1 :pre

[Description:]

Overlay a uniform or hierarchical grid over the simulation domain
defined by the "create_box"_create_box.html command.  The grid can
also be defined by the "read_grid"_read_grid.html command.

When a uniform or hierarchical grid is created it contains 1 or more
parent cells, and some number of child cells.  Parent cells have
children; child cells do not.  In the current SPARTA implementation,
all processors own a copy of all parent cells.  The child cells are
each owned by a unique processor; they are assigned by this command to
processors in a round-robin fashion, as they are created.  The
"balance_grid"_balance_grid.html command can be used after the grid is
defined, to assign them to processors in a more structured manner.

:line

A uniform grid is a hierarchical grid with a single level.  It is
defined by specifying only the arguments {Nx}, {Ny}, {Nz}, with no
additional levels.  This will create a Nx by Ny by Nz grid.  For 2d
simulations, {Nz} must equal 1.  A uniform grid has 1 parent cell (the
entire simulation box) and Nx*Ny*Nz child cells, e.g. 1000 child cells
in the first example above.

For uniform grids, one of the other keywords {stride}, {clump},
{block}, or {random} can be used, to determine which processors are
assigned which cells in the grid.

The {stride} keyword means that every Pth cell is assigned to the same
processor, where P is the number of processors.  E.g. if there are 100
cells and 10 processors, then the 1st processor (proc 0) will be
assigned cells 1,11,21, ..., 91.  The 2nd processor (proc 1) will be
assigned cells 2,12,22 ..., 92.  The 10th processor (proc 9) will be
assigned cells 10,20,30, ..., 100.

The {clump} keyword means that the Pth clump of cells is assigned to
the same processor, where P is the number of processors.  E.g. if
there are N = 100 cells and 10 processors, then the 1st processor
(proc 0) will be assigned cells 1 to 10.  The 2nd processor (proc 1)
will be assigned cells 11 to 20.  And The 10th processor (proc 9) will
be assigned cells 91 to 100.

The argument for {stride} and {clump} determines how the N grid cells
are ordered and is some permutation of {x}, {y}, and {z}.  Each of the
N cells has 3 indices (I,J,K) to describe its location in the 3d grid.
If the stride argument is yxz, then the cells will be ordered from 1
to N with the y dimension (J index) varying fastest, the x dimension
next (I index), and the z dimension slowest (K index).

The {block} keyword maps the P processors to a {Px} by {Py} by {Pz}
logical grid that overlays the actual {Nx} by {Ny} by {Nz} grid.  This
effectively assigns a contiguous 3d sub-block of cells to each
processor.

Any of the {Px}, {Py}, {Pz} parameters can be specified with an
asterisk "*", in which case SPARTA will choose the number of processors
in that dimension.  It will do this based on the size and shape of the
global grid so as to minimize the surface-to-volume ratio of each
processor's sub-block of cells.

The product of Px, Py, Pz must equal P, the total # of processors SPARTA
is running on.  For a 2d simulation, Pz must equal 1. If multiple
partitions are being used then P is the number of processors in this
partition; see "this section"_Section_start.html#start_6 for an
explanation of the -partition command-line switch.

Note that if you run on a large, prime number of processors P, then a
grid such as 1 x P x 1 will be required, which may incur extra
communication costs.

The {random} keyword means that each grid cell will be assigned
randomly to one of the processors.  Note that in this case every
processor will typically not be assigned exactly the same number of
cells.

:line

If a hierarchical grid with more than one level is desired, they can
be defined in ascending order, using the {level} keyword one or more
times, starting with {Nlevel} = 2.  The other keywords {stride},
{clump}, {block}, or {random} cannot be used with a hierarchical grid.

The Px, Py, Pz arguments specify which cells in the previous level are
flagged as parents and partitioned to create cells at the new level.
Each of the Px, Py, Pz arguments can be a single number or be
specified with a wildcard asterisk, as in the examples above.  For
example, Px can be specified as "*" or "*n" or "n*" or "m*n".  If N =
the number of grid cells in the x-direction in the previous level as
defined by Nx (or Cx), then an asterisk with no numeric values means
all cells with indices from 1 to N.  A leading asterisk means all
indices from 1 to n (inclusive).  A trailing asterisk means all
indices from n to N (inclusive).  A middle asterisk means all indices
from m to n (inclusive).

The Cx, Cy, Cz arguments are the number of new cells (in each
dimension) to partition each parent cell into.  For 2d simulations,
{Cz} must equal 1.  Note that for each new level, only grid cells that
exist in the previous level are partitioned further.  E.g. level 3
cells are only added to level 2 cells that exist, since some level 1
cells may not have been partitioned into level 2 cells.

The next-to-last example above creates a 2-level grid.  The 1st level
is 10x10x10.  Each of the 1000 level 1 cells is further partitioned
into 2x2x3 cells.  This means the total number of level 2 cells is
1000 * 12 = 12000.  The final grid in this example thus has 1001
parent cells (the simulation box plus the 1000 level 1 cells), and
12000 child cells.

The last example above creates a 3-level grid.  The 1st level is
8x8x10.  The 2nd level is 4x4x4 within each 1st level cell, but only
half or 320 of the 640 level 1 cells are partitioned, namely those
with x indices from 5 to 8.  Those with x indices from 1 to 4 remain
as level 1 cells.  Some of the level 2 cells are further partitioned
into 2x2x1 level 3 cells.  For the 4x4x4 level 2 grid within 320 or
the level 1 cells, only the level 2 cells with x index = 1, y index =
2-3, and z-index = 3-4 are further partitioned into level 3 cells,
which is just 4 of the 64 level 2 cells.

The final grid in the last example thus has 1601 parent cells: 1 for
the simulation box, 320 level 1 cells, and 1280 level 2 cells.  It has
24640 child cells: 320 level 1 cells, 19200 level 2 cells, and 5120
level 3 cells.

[Restrictions:]

This command can only be used after the simulation box is defined by
the "create_box"_create_box.html command.

In principle, the hierarchical grid used by SPARTA can have as many
levels as you wish.  Internally, the hierarchy corresponding to each
grid cell is converted into a 64-bit integer ID.  Explain it further.
Practically speaking this means you are limited to about 8 levels.

[Related commands:]

"create_box"_create_box.html, "read_grid"_read_grid.html

[Default:] none
