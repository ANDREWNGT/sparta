"SPARTA WWW Site"_dws - "SPARTA Documentation"_dd - "SPARTA Commands"_dc :c

:link(dws,http://dsmc.sandia.gov)
:link(dd,Manual.html)
:link(dc,Section_commands.html#comm)

:line

fix command :h3

[Syntax:]

fix ID style args :pre

ID = user-assigned name for the fix
style = one of a long list of possible style names (see below)
args = arguments used by a particular style :ul

[Examples:]

fix 1 grid/check 100 :pre

[Description:]

Set a fix that will be applied to the system.  In SPARTA, a "fix" is any
user-specified operation that is applied to the system during
timestepping.  Examples include adding particles via inlet boundary
conditions, enforcing boundary conditions, or computing diagnostics.
There are dozens of fixes defined in SPARTA and new ones can be added;
see "this section"_Section_modify.html for a discussion.

Fixes perform their operations at different stages of the timestep.
If 2 or more fixes operate at the same stage of the timestep, they are
invoked in the order they were specified in the input script.

The ID of a fix can only contain alphanumeric characters and
underscores.

Fixes can be deleted with the "unfix"_unfix.html command.

IMPORTANT NOTE: The "unfix"_unfix.html command is the only way to turn
off a fix; simply specifying a new fix with a similar style will not
turn off the first one.

If you specify a new fix with the same ID and style as an existing
fix, the old fix is deleted and the new one is created (presumably
with new settings).  This is the same as if an "unfix" command were
first performed on the old fix, except that the new fix is kept in the
same order relative to the existing fixes as the old one originally
was.  Note that this operation also wipes out any additional changes
made to the old fix via the "fix_modify"_fix_modify.html command.

The "fix modify"_fix_modify.html command allows settings for some
fixes to be reset.  See the doc page for individual fixes for details.

Some fixes store an internal "state" which is written to binary
restart files via the "restart"_restart.html or
"write_restart"_write_restart.html commands.  This allows the fix to
continue on with its calculations in a restarted simulation.  See the
"read_restart"_read_restart.html command for info on how to re-specify
a fix in an input script that reads a restart file.  See the doc pages
for individual fixes for info on which ones can be restarted.

:line

Some fixes calculate one of three styles of quantities: global,
per-molecule, or per-grid, which can be used by other commands or
output as described below.  A global quantity is one or more
system-wide values, e.g. the energy of a wall interacting with
particles.  A per-molecule quantity is one or more values per
particle, e.g. the displacement vector for each particle since time 0.
Per-cell quantities are calculated by each processor based on the grid
cells it owns.

Note that a single fix may produces either global or per-atom or
per-grid quantities (or none at all), but never more than one of
these.

Global, per-atom, and local quantities each come in three kinds: a
single scalar value, a vector of values, or a 2d array of values.  The
doc page for each fix describes the style and kind of values it
produces, e.g. a per-atom vector.  Some fixes produce more than one
kind of a single style, e.g. a global scalar and a global vector.

When a fix quantity is accessed, as in many of the output commands
discussed below, it can be referenced via the following bracket
notation, where ID is the ID of the fix:

f_ID | entire scalar, vector, or array
f_ID\[I\] | one element of vector, one column of array
f_ID\[I\]\[J\] | one element of array :tb(s=|)

In other words, using one bracket reduces the dimension of the
quantity once (vector -> scalar, array -> vector).  Using two brackets
reduces the dimension twice (array -> scalar).  Thus a command that
uses scalar fix values as input can also process elements of a vector
or array.

Note that commands and "variables"_variable.html which use fix
quantities typically do not allow for all kinds, e.g. a command may
require a vector of values, not a scalar.  This means there is no
ambiguity about referring to a fix quantity as f_ID even if it
produces, for example, both a scalar and vector.  The doc pages for
various commands explain the details.

:line

In SPARTA, the values generated by a fix can be used in several ways:

Global values can be output via the "stats_style"_stats_style.html
command.  Or the values can be referenced in a "variable
equal"_variable.html or "variable atom"_variable.html command. :ulb,l

Per-molecule values can be output via the "dump particle"_dump.html
command.  Or the per-molecule values can be referenced in an
"molecule-style variable"_variable.html. :l

Per-grid values can be output via the "dump grid"_dump.html command.
Or the per-grid values can be referenced in a "grid-style
variable"_variable.html. :l,ule

:line

Each fix style has its own documentation page which describes its
arguments and what it does, as listed below.  Here is an alphabetic
list of fix styles available in SPARTA:

"ave/grid"_fix_ave_grid.html - compute per-grid time-averaged quantities
"ave/time"_fix_ave_time.html - compute/output global time-averaged quantities
"grid/check"_fix_grid_check.html - check if particles are in the correct grid cell
"inflow"_fix_inflow.html - inject molecules at global boundaries
"print"_fix_print.html - print text and variables during a simulation :ul

:line

[Restrictions:] none

[Related commands:]

"unfix"_unfix.html

[Default:] none
