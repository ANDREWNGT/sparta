"DSMC WWW Site"_dws - "DSMC Documentation"_dd - "DSMC Commands"_dc :c

:link(dws,http://dsmc.sandia.gov)
:link(dd,Manual.html)
:link(dc,Section_commands.html#comm)

:line
   
dump command :h3
"dump image"_dump_image.html command :h3

[Syntax:]

dump ID style N file args :pre

ID = user-assigned name for the dump :ulb,l
style = {molecule} or {grid} or {surf} or {image} :l
N = dump every this many timesteps :l
file = name of file to write dump info to :l
args = list of arguments for a particular style :l
  {molecule} args = list of molecule attributes
    possible attributes = id, type, x, y, z, xs, ys, zs, vx, vy, vz,
                          c_ID, c_ID\[N\], f_ID, f_ID\[N\], v_name :pre

      id = molecule ID
      type = molecule species
      x,y,z = unscaled molecule coordinates
      xs,ys,zs = scaled molecule coordinates
      vx,vy,vz = molecule velocities
      c_ID = per-molecule vector calculated by a compute with ID
      c_ID\[N\] = Nth column of per-molecule array calculated by a compute with ID
      f_ID = per-molecule vector calculated by a fix with ID
      f_ID\[N\] = Nth column of per-molecule array calculated by a fix with ID
      v_name = per-molecule vector calculated by an molecule-style variable with name
  {grid} args = list of grid attributes
    possible attributes = id, proc, xlo, ylo, zlo, xhi, yhi, zhi,
                          c_ID, c_ID\[N\], f_ID, f_ID\[N\], v_name :pre

      id = grid cell ID
      proc = processor that owns grid cell
      xlo,ylo,zlo = coords of lower left corner of grid cell
      xhi,yhi,zhi = coords of lower left corner of grid cell
      c_ID = per-grid vector calculated by a compute with ID
      c_ID\[N\] = Nth column of per-grid array calculated by a compute with ID
      f_ID = per-grid vector calculated by a fix with ID
      f_ID\[N\] = Nth column of per-grid array calculated by a fix with ID
      v_name = per-grid vector calculated by an cell-style variable with name
  {surf} args = not yet supported
  {image} args = discussed on "dump image"_dump_image.html doc page :pre
:ule

[Examples:]

dump 1 molecule 100 dump.myforce.* id type x y vx fx
dump 2 molecule 100 dump.%.myforce id type c_myF\[3\] v_ke
dump 3 grid 1000 tmp.grid id proc xlo ylo zlo xhi yhi zhi :pre

[Description:]

Dump a snapshot of simulation quantities to one or more files every N
timesteps in one of several styles.  The {image} style is the
exception; it creates a JPG or PPM image file of the simulation
configuration every N timesteps, as discussed on the "dump
image"_dump_image.html doc page.

The {style} keyword determines what quantities are written to the file
and in what format.  Settings made via the
"dump_modify"_dump_modify.html command can also alter what info is
included in the file and the format of individual values.

As described below, the filename determines the kind of output (text
or binary or gzipped, one big file or one per timestep, one big file
or one per processor).

:line

The {molecule} and {grid} and {surf} styles create files in a simple
text format that is self-explanatory when viewing a dump file.  Many
of the DSMC "post-processing tools"_Section_tools.html, including
"Pizza.py"_http://www.sandia.gov/~sjplimp/pizza.html, work with this
format.

For post-processing purposes the text files are self-describing in the
following sense.

The dimensions of the simulation box are included in each snapshot.
This information is is formatted as:

ITEM: BOX BOUNDS xx yy zz
xlo xhi
ylo yhi
zlo zhi :pre

where xlo,xhi are the maximum extents of the simulation box in the
x-dimension, and similarly for y and z.  The "xx yy zz" represent 6
characters that encode the style of boundary for each of the 6
simulation box boundaries (xlo,xhi and ylo,yhi and zlo,zhi).  Each of
the 6 characters is either o = outflow, p = periodic, or s = specular.
See the "boundary"_doc/boundary.html command for details.

The "ITEM: ATOMS" or "ITEM: CELLS" or "ITEM: SURFS" line in each
snapshot lists column descriptors for the per-molecule or per-grid or
per-surf lines that follow.  The descriptors will be the attributes
you specify in the dump command for the style.

Styles {molecule} and {grid} and {surf} allow you to specify a list of
attributes to be written to the dump file for each molecule or grid
cell or surface.  Possible attributes are listed above and will appear
in the order specified.  An explanation of the possible attributes is
given below.

:line

Dumps are performed on timesteps that are a multiple of N (including
timestep 0).  Note that this means a dump will not be performed on the
initial timestep after the dump command is invoked, if the current
timestep is not a multiple of N.  This behavior can be changed via the
"dump_modify first"_dump_modify.html command.  N can be changed
between runs by using the "dump_modify every"_dump_modify.html
command.

The specified filename determines how the dump file(s) is written.
The default is to write one large text file, which is opened when the
dump command is invoked and closed when an "undump"_undump.html
command is used or when DSMC exits.

Dump filenames can contain two wildcard characters.  If a "*"
character appears in the filename, then one file per snapshot is
written and the "*" character is replaced with the timestep value.
For example, tmp.dump.* becomes tmp.dump.0, tmp.dump.10000,
tmp.dump.20000, etc.  Note that the "dump_modify pad"_dump_modify.html
command can be used to insure all timestep numbers are the same length
(e.g. 00010), which can make it easier to read a series of dump files
in order by some post-processing tools.

If a "%" character appears in the filename, then one file is written
for each processor and the "%" character is replaced with the
processor ID from 0 to P-1.  For example, tmp.dump.% becomes
tmp.dump.0, tmp.dump.1, ... tmp.dump.P-1, etc.  This creates smaller
files and can be a fast mode of output on parallel machines that
support parallel I/O for output.

Note that the "*" and "%" characters can be used together to produce a
large number of small dump files!

If the filename ends with ".bin", the dump file (or files, if "*" or
"%" is also used) is written in binary format.  A binary dump file
will be about the same size as a text version, but will typically
write out much faster.  Of course, when post-processing, you will need
to convert it back to text format (see the "binary2txt
tool"_Section_tools.html#binary) or write your own code to read the
binary file.  The format of the binary file can be understood by
looking at the tools/binary2txt.cpp file.  This option is only
available for the {molecule} style.

If the filename ends with ".gz", the dump file (or files, if "*" or "%"
is also used) is written in gzipped format.  A gzipped dump file will
be about 3x smaller than the text version, but will also take longer
to write.

:line

This section explains the molecule attributes that can be specified as
part of the {molecule} style.

{Id} is the molecule ID.  {Type} is an integer index representing the
molecule species.

The {x}, {y}, {z} attributes write molecule coordinates "unscaled", in
the appropriate distance "units"_units.html.  Use {xs}, {ys}, {zs} if
you want the coordinates "scaled" to the box size, so that each value
is 0.0 to 1.0.

{Vx}, {vy}, {vz} are components of molecule velocity.

The {c_ID} and {c_ID\[N\]} attributes allow per-molecule vectors or
arrays calculated by a "compute"_compute.html to be output.  The ID in
the attribute should be replaced by the actual ID of the compute that
has been defined previously in the input script.  See the
"compute"_compute.html command for details.

Note that computes which calculate global or per-grid quantities, as
opposed to per-molecule quantities, cannot be output in a dump
molecule command.  Instead, global quantities can be output by the
"stats_style"_stats_style.html command, and per-grid quantities can be
output by the dump grid command.

If {c_ID} is used as a attribute, then the per-molecule vector
calculated by the compute is printed.  If {c_ID\[N\]} is used, then N
must be in the range from 1-M, which will print the Nth column of the
M-length per-molecule array calculated by the compute.

The {f_ID} and {f_ID\[N\]} attributes allow vector or array
per-molecule quantities calculated by a "fix"_fix.html to be output.
The ID in the attribute should be replaced by the actual ID of the fix
that has been defined previously in the input script.

If {f_ID} is used as a attribute, then the per-molecule vector
calculated by the fix is printed.  If {f_ID\[N\]} is used, then N must
be in the range from 1-M, which will print the Nth column of the
M-length per-molecule array calculated by the fix.

The {v_name} attribute allows per-molecule vectors calculated by a
"variable"_variable.html to be output.  The name in the attribute
should be replaced by the actual name of the variable that has been
defined previously in the input script.  Only a molecule-style
variable can be referenced, since it is the only style that generates
per-molecule values.  Variables of style {molecule} can reference
per-molecule attributes, stats keywords, or invoke other computes,
fixes, or variables when they are evaluated, so this is a very general
means of creating quantities to output to a dump file.

See "Section_modify"_Section_modify.html of the manual for information
on how to add new compute and fix styles to DSMC to calculate
per-molecule quantities which could then be output into dump files.

:line

This section explains the grid cell attributes that can be specified
as part of the {grid} style.

{Id} is the grid cell ID. 

{Proc} is the ID of the processor which owns the grid cell.

The {xlo}, {ylo}, {zlo} attributes write the coordinates of the
lower-left corner of the grid cell in the appropriate distance
"units"_units.html.  The {xhi}, {yhi}, {zhi} attributes write the
coordinates of the upper-right corner of the grid cell.

The {c_ID} and {c_ID\[N\]} attributes allow per-grid vectors or arrays
calculated by a "compute"_compute.html to be output.  The ID in the
attribute should be replaced by the actual ID of the compute that has
been defined previously in the input script.  See the
"compute"_compute.html command for details.

Note that computes which calculate global or per-molecule quantities,
as opposed to per-grid quantities, cannot be output in a dump grid
command.  Instead, global quantities can be output by the
"stats_style"_stats_style.html command, and per-molecule quantities
can be output by the dump molecule command.

If {c_ID} is used as a attribute, then the per-grid vector calculated
by the compute is printed.  If {c_ID\[N\]} is used, then N must be in
the range from 1-M, which will print the Nth column of the M-length
per-grid array calculated by the compute.

The {f_ID} and {f_ID\[N\]} attributes allow vector or array per-grid
quantities calculated by a "fix"_fix.html to be output.  The ID in the
attribute should be replaced by the actual ID of the fix that has been
defined previously in the input script.

If {f_ID} is used as a attribute, then the per-grid vector calculated
by the fix is printed.  If {f_ID\[N\]} is used, then N must be in the
range from 1-M, which will print the Nth column of the M-length
per-grid array calculated by the fix.

The {v_name} attribute allows per-grid vectors calculated by a
"variable"_variable.html to be output.  The name in the attribute
should be replaced by the actual name of the variable that has been
defined previously in the input script.  Only a cell-style variable
can be referenced, since it is the only style that generates per-grid
values.  Variables of style {cell} can reference per-grid attributes,
stats keywords, or invoke other computes, fixes, or variables when
they are evaluated, so this is a very general means of creating
quantities to output to a dump file.

See "Section_modify"_Section_modify.html of the manual for information
on how to add new compute and fix styles to DSMC to calculate per-grid
quantities which could then be output into dump files.

:line

This section explains the surface element attributes that can be
specified as part of the {surf} style.

This style is not yet supported.

:line

[Restrictions:]

To write gzipped dump files, you must compile DSMC with the
-DDSMC_GZIP option - see the "Making DSMC"_Section_start.html#start_2
section of the documentation.

[Related commands:]

"dump image"_dump_image.html, "dump_modify"_dump_modify.html,
"undump"_undump.html

[Default:]

The defaults for the image style are listed on the "dump
image"_dump_image.html doc page.
