"Previous Section"_Section_start.html - "SPARTA WWW Site"_sws - "SPARTA Documentation"_sd - "SPARTA Commands"_sc - "Next Section"_Section_howto.html :c

:link(sws,http://dsmc.sandia.gov)
:link(sd,Manual.html)
:link(sc,Section_commands.html#comm)

:line

3. Commands :h3

This section describes how a SPARTA input script is formatted and what
commands are used to define a SPARTA simulation.

3.1 "SPARTA input script"_#cmd_1
3.2 "Parsing rules"_#cmd_2
3.3 "Input script structure"_#cmd_3
3.4 "Commands listed by category"_#cmd_4
3.5 "Commands listed alphabetically"_#cmd_5 :all(b)

:line

3.1 SPARTA input script :link(cmd_1),h4

SPARTA executes by reading commands from a input script (text file),
one line at a time.  When the input script ends, SPARTA exits.  Each
command causes SPARTA to take some action.  It may set an internal
variable, read in a file, or run a simulation.  Most commands have
default settings, which means you only need to use the command if you
wish to change the default.

In many cases, the ordering of commands in an input script is not
important.  However the following rules apply:

(1) SPARTA does not read your entire input script and then perform a
simulation with all the settings.  Rather, the input script is read
one line at a time and each command takes effect when it is read.
Thus this sequence of commands:

timestep 0.5 
run      100 
run      100 :pre

does something different than this sequence:

run      100 
timestep 0.5 
run      100 :pre

In the first case, the specified timestep (0.5 fmsec) is used for two
simulations of 100 timesteps each.  In the 2nd case, the default
timestep (1.0 fmsec) is used for the 1st 100 step simulation and a 0.5
fmsec timestep is used for the 2nd one.

(2) Some commands are only valid when they follow other commands.  For
example you cannot set the temperature of a group of atoms until atoms
have been defined and a group command is used to define which atoms
belong to the group.

(3) Sometimes command B will use values that can be set by command A.
This means command A must precede command B in the input script if it
is to have the desired effect.  For example, the
"read_data"_read_data.html command initializes the system by setting
up the simulation box and assigning atoms to processors.  If default
values are not desired, the "processors"_processors.html and
"boundary"_boundary.html commands need to be used before read_data to
tell SPARTA how to map processors to the simulation box.

Many input script errors are detected by SPARTA and an ERROR or
WARNING message is printed.  "This section"_Section_errors.html gives
more information on what errors mean.  The documentation for each
command lists restrictions on how the command can be used.

:line

3.2 Parsing rules :link(cmd_2),h4

Each non-blank line in the input script is treated as a command.
SPARTA commands are case sensitive.  Command names are lower-case, as
are specified command arguments.  Upper case letters may be used in
file names or user-chosen ID strings.

Here is how each line in the input script is parsed by SPARTA:

(1) If the last printable character on the line is a "&" character
(with no surrounding quotes), the command is assumed to continue on
the next line.  The next line is concatenated to the previous line by
removing the "&" character and newline.  This allows long commands to
be continued across two or more lines.

(2) All characters from the first "#" character onward are treated as
comment and discarded.  See an exception in (6).  Note that a
comment after a trailing "&" character will prevent the command from
continuing on the next line.  Also note that for multi-line commands a
single leading "#" will comment out the entire command.

(3) The line is searched repeatedly for $ characters, which indicate
variables that are replaced with a text string.  See an exception in
(6).  If the $ is followed by curly brackets, then the variable name
is the text inside the curly brackets.  If no curly brackets follow
the $, then the variable name is the single character immediately
following the $.  Thus $\{myTemp\} and $x refer to variable names
"myTemp" and "x".  See the "variable"_variable.html command for
details of how strings are assigned to variables and how they are
substituted for in input script commands.

(4) The line is broken into "words" separated by whitespace (tabs,
spaces).  Note that words can thus contain letters, digits,
underscores, or punctuation characters.

(5) The first word is the command name.  All successive words in the
line are arguments.

(6) If you want text with spaces to be treated as a single argument,
it can be enclosed in either double or single quotes.  E.g.

print "Volume = $v"
print 'Volume = $v' :pre

The quotes are removed when the single argument is stored internally.
See the "dump modify format"_dump_modify.html or "if"_if.html commands
for examples.  A "#" or "$" character that is between quotes will not
be treated as a comment indicator in (2) or substituted for as a
variable in (3).

IMPORTANT NOTE: If the argument is itself a command that requires a
quoted argument (e.g. using a "print"_print.html command as part of an
"if"_if.html or "run every"_run.html command), then the double and
single quotes can be nested in the usual manner.  See the doc pages
for those commands for examples.  Only one of level of nesting is
allowed, but that should be sufficient for most use cases.

:line

3.3 Input script structure :h4,link(cmd_3)

This section describes the structure of a typical SPARTA input script.
The "examples" directory in the SPARTA distribution contains many
sample input scripts; the corresponding problems are discussed in
"this section"_Section_example.html, and animated on the "SPARTA WWW
Site"_sws.

A SPARTA input script typically has 4 parts:

Initialization
Problem definition
Settings
Run a simulation :ol

The last 2 parts can be repeated as many times as desired.  I.e. run a
simulation, change some settings, run some more, etc.  Each of the 4
parts is now described in more detail.  Remember that almost all the
commands need only be used if a non-default value is desired.

(1) Initialization

Set parameters that need to be defined before atoms are created or
read-in from a file.

The relevant commands are "dimension"_dimension.html

(2) Problem definition

These items must be setup to run a SPARTA calculation:

simulation box via "create_box"_create_box.html
grid via "create_grid"_create_grid.html
particles via "create_molecules"_create_molecules.html :ul

(3) Settings

Once particles and the grid are defined, a variety of settings can be
specified: simulation parameters, output options, etc.

Various simulation parameters are set by these commands:
"timestep"_timestep.html

Output is set by these commands:

(4) Run a simulation

A simulation is run using the "run"_run.html command.

:line

3.4 Commands listed by category :link(cmd_4),h4

This section lists all SPARTA commands, grouped by category.  The
"next section"_#cmd_5 lists the same commands alphabetically.  Note
that some style options for some commands are part of specific SPARTA
packages, which means they cannot be used unless the package was
included when SPARTA was built.  Not all packages are included in a
default SPARTA build.  These dependencies are listed as Restrictions
in the command's documentation.

Initialization:

"dimension"_dimension.html

Problem definition:

"create_box"_create_box.html, "create_grid"_create_grid.html,
"create_molecules"_create_molecules.html, "species"_species.html

Settings:

"timestep"_timestep.html, "velocity"_velocity.html

Actions:

"run"_run.html

Miscellaneous:

"clear"_clear.html, "echo"_echo.html, "if"_if.html,
"include"_include.html, "jump"_jump.html, "label"_label.html,
"log"_log.html, "next"_next.html, "print"_print.html,
"shell"_shell.html, "variable"_variable.html

:line

3.5 Individual commands :h4,link(cmd_5),link(comm)

This section lists all SPARTA commands alphabetically, with a separate
listing below of styles within certain commands.  The "previous
section"_#cmd_4 lists the same commands, grouped by category.  Note
that some style options for some commands are part of specific SPARTA
packages, which means they cannot be used unless the package was
included when SPARTA was built.  Not all packages are included in a
default SPARTA build.  These dependencies are listed as Restrictions
in the command's documentation.

"boundary"_boundary.html,
"bound_modify"_bound_modify.html,
"clear"_clear.html,
"collide"_collide.html,
"compute"_compute.html,
"create_molecules"_create_molecules.html,
"create_box"_create_box.html,
"create_grid"_create_grid.html,
"dimension"_dimension.html,
"dump"_dump.html,
"dump_image"_dump_image.html,
"dump_modify"_dump_modify.html,
"echo"_echo.html,
"fix"_fix.html,
"global"_global.html,
"if"_if.html,
"include"_include.html,
"jump"_jump.html,
"label"_label.html,
"log"_log.html,
"mixture"_mixture.html,
"next"_next.html,
"partition"_partition.html,
"print"_print.html,
"read_surf"_read_surf.html,
"restart"_restart,
"run"_run.html,
"seed"_seed.html,
"shell"_shell.html,
"species"_species.html,
"stats"_stats.html,
"stats_modify"_modify.html,
"stats_style"_stats_style.html,
"surf_collide"_surf_collide.html,
"timestep"_timestep.html,
"uncompute"_uncompute.html,
"undump"_undump.html,
"unfix"_unfix.html,
"units"_units.html,
"variable"_variable.html,
"write_restart"_write_restart.html :tb(c=6,ea=c)

:line

Fix styles :h4

See the "fix"_fix.html command for one-line descriptions
of each style or click on the style itself for a full description:

"ave/grid"_fix_ave_grid.html,
"ave/surf"_fix_ave_surf.html,
"ave/time"_fix_ave_time.html,
"grid/check"_fix_grid_check.html,
"inflow"_fix_inflow.html,
"print"_fix_print.html :tb(c=6,ea=c)

:line

Compute styles :h4

See the "compute"_compute.html command for one-line descriptions of
each style or click on the style itself for a full description:

"grid"_compute_grid.html,
"ke/molecule"_compute_ke_molecule.html,
"sonine/grid"_compute_sonine_grid.html,
"temp"_compute_temp.html :tb(c=6,ea=c)

:line

Collide styles :h4

See the "collide"_collide.html command for one-line descriptions of
each style or click on the style itself for a full description:

"vss"_collide_vss.html :tb(c=1,ea=c)

:line

Surf collide styles :h4

See the "surf_collide"_surf_collide.html command for one-line
descriptions of each style or click on the style itself for a full
description:

"diffuse"_surf_collide_diffuse.html :tb(c=1,ea=c)
